{"version":3,"sources":["serviceWorker.ts","components/CreatePoll/createpoll.tsx","components/ViewPoll/viewpoll.tsx","components/VotePoll/vote.tsx","components/Nav/navbar.tsx","components/SharePoll/sharepoll.tsx","components/Error/error.tsx","components/Main/main.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","orangizePayload","payload","pollQuest","Object","keys","pollQuestions","map","key","length","defineProperty","filter","item","reduce","obj","i","value","values","pollOption","question","schema","yup","shape","required","max","poll1","poll2","poll3","poll4","poll5","poll6","poll7","poll8","CreatePoll","props","_useState","useState","_useState2","slicedToArray","waiter","setWaiter","_useState3","_useState4","ierr","setIerr","counter","useRef","useEffect","timeout","setTimeout","clearTimeout","react_default","a","createElement","className","formik_esm","initialValues","validationSchema","onSubmit","_ref2","asyncToGenerator","regenerator_default","mark","_callee","send","data","wrap","_context","prev","next","fetch","method","body","JSON","stringify","sent","json","console","log","abrupt","history","push","concat","t0","stop","_x","apply","this","arguments","_ref3","name","placeholder","autoComplete","component","current","val","type","disabled","ViewPoll","options","poll","pollData","labels","count","datasets","label","backgroundColor","hoverBackgroundColor","legend","fontColor","scales","yAxes","ticks","beginAtZero","suggestedMin","suggestedMax","int","stepSize","xAxes","es","error","selected","setSelected","style","margin","message","react_router_dom","to","Radio","checked","onChange","e","target","onClick","ws","id","params","upvote","Navbar","useStyles","makeStyles","theme","button","spacing","input","display","SharePoll","React","memo","str","document","host","classes","clicked","setClicked","TextField","react_copy_to_clipboard_lib","text","onCopy","Button","variant","color","ErrorScreen","clearError","checkRoute","path","matchPath","exact","strict","Homepage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","webSocket","state","creator","pollId","pathname","setMessage","addEventListener","readWs","msg","result","parse","handleError","setState","shallow","err","close","removeEventListener","_this2","_this$state","webStr","WebSocket","_this3","_this$state2","route","_this4","Nav_navbar","SharePoll_sharepoll","_id","react_router","render","ViewPoll_viewpoll","assign","VotePoll_vote","components_Error_error","CreatePoll_createpoll","Component","withRouter","ReactDOM","main","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8b35cad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport './createpoll.scss'\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport * as yup from 'yup'\r\n\r\ninterface IProps extends RouteComponentProps<{ id: string }> {\r\n}\r\ninterface Poll {\r\n    question: string;\r\n    pollQuestions: PollQ;\r\n}\r\ninterface PollQ {\r\n    [key: string]: any;\r\n    poll1: string;\r\n    poll2: string;\r\n    poll3: string;\r\n    poll4: string;\r\n    poll5: string;\r\n    poll6: string;\r\n    poll7: string;\r\n    poll8: string;\r\n}\r\nconst orangizePayload = (payload: Poll) => {\r\n    const pollQuest = Object.keys(payload.pollQuestions).map(key => {\r\n        const { pollQuestions } = payload\r\n        if (pollQuestions[key].length === 0) return\r\n        return { [key]: pollQuestions[key] }\r\n    }).filter(item => item).reduce((obj, i) => {\r\n        const key = Object.keys(i)\r\n        const value = Object.values(i)\r\n        obj[key[0]] = { pollOption: value[0] }\r\n        return obj\r\n    }, {})\r\n\r\n    return {\r\n        question: payload.question,\r\n        pollQuestions: pollQuest\r\n    }\r\n}\r\n\r\nconst schema = yup.object().shape({\r\n    question: yup.string().required(\"Poll must have a question\").max(78),\r\n    pollQuestions: yup.object().shape({\r\n        poll1: yup.string().required(\"Required field\").max(48, \"Must be shorter than 48 characters\"),\r\n        poll2: yup.string().required(\"Required field\").max(48, \"Must be shorter than 48 characters\"),\r\n        poll3: yup.string().max(48, \"Must be shorter than 48 characters\"),\r\n        poll4: yup.string().max(48, \"Must be shorter than 48 characters\"),\r\n        poll5: yup.string().max(48, \"Must be shorter than 48 characters\"),\r\n        poll6: yup.string().max(48, \"Must be shorter than 48 characters\"),\r\n        poll7: yup.string().max(48, \"Must be shorter than 48 characters\"),\r\n        poll8: yup.string().max(48, \"Must be shorter than 48 characters\")\r\n    })\r\n})\r\n\r\nconst CreatePoll = (props: IProps) => {\r\n    const [waiter, setWaiter] = useState<boolean>(false)\r\n    const [ierr, setIerr] = useState<string | null>(null)\r\n    let counter = useRef<number>(2)\r\n\r\n\r\n    useEffect(() => {\r\n        let timeout;\r\n        if (waiter) {\r\n           timeout = setTimeout(() => {\r\n                setWaiter(false)\r\n            }, 3500)\r\n        } else {\r\n            clearTimeout(timeout)\r\n        }\r\n        return clearTimeout(timeout)\r\n    }, [waiter])\r\n\r\n    return (\r\n        <div className=\"create-poll\">\r\n            {ierr && (\r\n                <h2 className=\"error\">{ierr}</h2>\r\n            )}\r\n            <Formik\r\n                initialValues={{\r\n                    question: \"\",\r\n                    pollQuestions: {\r\n                        poll1: \"\",\r\n                        poll2: \"\",\r\n                        poll3: \"\",\r\n                        poll4: \"\",\r\n                        poll5: \"\",\r\n                        poll6: \"\",\r\n                        poll7: \"\",\r\n                        poll8: \"\"\r\n                    }\r\n                }}\r\n                validationSchema={schema}\r\n                onSubmit={async (values) => {\r\n                    setWaiter(true)\r\n                    const payload = orangizePayload(values)\r\n                    try {\r\n                        const send = await fetch(\"/createpoll\", {\r\n                            method: 'POST',\r\n                            body: JSON.stringify(payload)\r\n                        })\r\n                        const data: string = await send.json();\r\n                        console.log(data)\r\n                        if (!data) return\r\n                        setWaiter(false)\r\n                        props.history.push(`/vote/${data}`)\r\n                    } catch (err) {\r\n                        console.log(err)\r\n                        setIerr(\"Sever error... try again\")\r\n                    }\r\n                }}\r\n            >\r\n                {({ values }) => (\r\n                    <Form\r\n                    >\r\n                        <div className=\"poll-content\">\r\n                            <Field\r\n                                name=\"question\"\r\n                                className=\"question input-design\"\r\n                                placeholder=\"Enter your question here\"\r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <ErrorMessage\r\n                                name={`question`}\r\n                                component=\"span\"\r\n                            />\r\n                            {Object.keys(values.pollQuestions).map((key: string, i: number) => {\r\n                                if (i >= counter.current) return\r\n                                const val = values.pollQuestions[`poll${counter.current}`]\r\n                                if (val && val.length > 1) {\r\n                                    counter.current += 1\r\n                                }\r\n                                return (\r\n                                    <div\r\n                                        className=\"master-div\"\r\n                                        key={key}\r\n                                    >\r\n                                        <div className=\"subdiv\">\r\n                                            <div className=\"circle\"></div>\r\n                                            <Field\r\n                                                key={key}\r\n                                                placeholder={\"Enter poll option\"}\r\n                                                name={`pollQuestions.${key}`}\r\n                                                className=\"input-design\"\r\n                                                autoComplete=\"off\"\r\n                                                type=\"text\"\r\n                                            />\r\n                                        </div>\r\n                                        <ErrorMessage\r\n                                            name={`pollQuestions.${key}`}\r\n                                            component=\"span\"\r\n                                            className=\"custom-error\"\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            <div className=\"button\">\r\n                                <button type=\"submit\" disabled={waiter} className={`submit-button ${waiter ? \"off-button\" : \"\"}`}>\r\n                                    {waiter ? \"Waiting...\" : \"Submit\"}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePoll","import React from 'react'\r\nimport { Poll } from '../Main/main'\r\nimport { Bar } from 'react-chartjs-2'\r\nimport './viewpoll.scss'\r\n\r\ninterface Props {\r\n    poll: Poll | null;\r\n}\r\n\r\nconst ViewPoll = (props: Props) => {\r\n    let data = {}\r\n    let total = 0\r\n    let options = {}\r\n    if (props.poll) {\r\n        const pollData = Object.values(props.poll.pollQuestions)\r\n        const obj = {\r\n            labels: pollData.map(obj => `${obj.pollOption} ${obj.count} votes`),\r\n            datasets: [\r\n                {\r\n                    label: props.poll.question,\r\n                    data: pollData.map(obj => obj.count),\r\n                    backgroundColor: \"rgba(178,53,53,.75)\",\r\n                    hoverBackgroundColor: \"rgba(178,53,53,.85)\"\r\n                }\r\n            ]\r\n        }\r\n        total = pollData.reduce((int, item) => {\r\n            return int += item.count\r\n        }, 0)\r\n        data = obj\r\n\r\n        options = {\r\n            legend: {\r\n                labels: {\r\n                    fontColor: \"black\"\r\n                }\r\n            },\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        suggestedMin: 0,\r\n                        suggestedMax: total,\r\n                        fontColor: 'black',\r\n                        stepSize: 1\r\n                    }\r\n                }],\r\n                xAxes: [{\r\n                    ticks: {\r\n                        fontColor: 'black'\r\n                    }\r\n                }]\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`create-poll results`}>\r\n            {props.poll && (\r\n                <Bar\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPoll","import React, { useState } from 'react'\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom'\r\nimport { Poll, Error } from '../Main/main'\r\nimport { Radio } from '@material-ui/core'\r\nimport './vote.scss'\r\n\r\ninterface IProps extends RouteComponentProps<{ id: string }> {\r\n    ws: WebSocket;\r\n    poll: Poll | null;\r\n    error: Error | null;\r\n}\r\n\r\n\r\nconst ViewPoll = (props: IProps) => {\r\n    const { error, poll } = props\r\n\r\n    const [selected, setSelected] = useState<string>(\"\")\r\n    return (\r\n        <div className=\"create-poll vote-poll\">\r\n            {!poll && (\r\n                <h2 \r\n                style={{margin: \"auto\"}}\r\n                className=\"poll-question\">Fetching Poll...</h2>\r\n            )}\r\n            {error && (\r\n                <div className=\"vote-error\">\r\n                    <span>{error.message}</span>\r\n                    <Link className=\"error-button\" to=\"/\">Create new poll</Link>\r\n                </div>\r\n            )}\r\n            {poll && (\r\n                <div className=\"vote-success\">\r\n                    <span className=\"poll-question\">{poll.question}</span>\r\n                    <div className=\"poll-questions\">\r\n                        {Object.keys(poll.pollQuestions).map(key => {\r\n                            const { pollQuestions } = poll\r\n                            return (\r\n                                <div className=\"quest\" key={key}>\r\n                                    <Radio\r\n                                        className=\"radio-button\"\r\n                                        name={key}\r\n                                        checked={selected === key ? true : false}\r\n                                        onChange={(e) => setSelected(e.target.name)}\r\n                                    />\r\n                                    <label>\r\n                                        {pollQuestions[key].pollOption}\r\n                                    </label>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    {selected.length > 0 && (\r\n                        <button\r\n                            className=\"submit-button\"\r\n                            onClick={() => {\r\n                                const { ws } = props\r\n                                const payload = {\r\n                                    id: props.match.params.id,\r\n                                    upvote: selected,\r\n                                    type: \"upvote\"\r\n                                }\r\n                                ws.send(JSON.stringify(payload))\r\n                                props.history.push(`/view/${props.match.params.id}`)\r\n                            }}\r\n                        >Submit</button>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPoll","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './navbar.scss'\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <Link to=\"/\" className=\"brand-logo\">\r\n                <h4>Go Poll</h4>\r\n            </Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useState } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport { Button } from '@material-ui/core'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport './sharepoll.scss'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\ninterface Props {\r\n    id: string | null;\r\n}\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    input: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\n\r\nconst SharePoll = React.memo((props: Props) => {\r\n    const str = props.id ? `${document.location.host}/vote/${[props.id]}` : \"poo\"\r\n    const classes = useStyles()\r\n    const [clicked, setClicked] = useState<boolean>(false)\r\n    return (\r\n        <div className={`master-share ${props.id ? \"\" : \"hide\"}`}>\r\n            <div className=\"inner-share\">\r\n                <TextField\r\n                    label=\"Share your poll!\"\r\n                    value={str}\r\n                />\r\n                <CopyToClipboard\r\n                text={str}\r\n                onCopy={() => setClicked(true)}\r\n                >\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        className={classes.button}\r\n                    >\r\n                        {clicked ? \"Copied!\" : \"Share\"}\r\n                    </Button>\r\n                </CopyToClipboard>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default SharePoll","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Error } from '../Main/main'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport './error.scss'\r\n\r\n\r\ninterface Props extends RouteComponentProps {\r\n    error: Error;\r\n    clearError: Function;\r\n}\r\n\r\nconst ErrorScreen = (props: Props) => {\r\n\r\n    useEffect(() => {\r\n        if (!props.error) {\r\n            props.history.push(\"/\")\r\n            return\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className=\"create-poll vote-error err\">\r\n            {props.error && (\r\n                <div>\r\n                    <span>{props.error.message}</span>\r\n                    <Link\r\n                        onClick={() => props.clearError()}\r\n                        className=\"error-button\" to=\"/\"\r\n                    >Create new poll</Link>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorScreen","import React, { Component } from 'react'\r\nimport { Switch, Route, withRouter, matchPath } from 'react-router-dom'\r\nimport { RouteComponentProps, match } from 'react-router'\r\nimport './main-styles.scss'\r\n\r\nimport CreatePoll from '../CreatePoll/createpoll'\r\nimport ViewPoll from '../ViewPoll/viewpoll'\r\nimport VotePoll from '../VotePoll/vote'\r\nimport Nav from '../Nav/navbar'\r\nimport SharePoll from '../SharePoll/sharepoll'\r\nimport ErrorScreen from '../Error/error'\r\n\r\ninterface State {\r\n    ws: WebSocket | null;\r\n    poll: Poll | null;\r\n    creator: boolean;\r\n    pollId: ID | null;\r\n    error: Error | null;\r\n}\r\nexport interface Poll {\r\n    pollQuestions: PollQuestions;\r\n    type: string;\r\n    question: string;\r\n    _id: string;\r\n\r\n}\r\ninterface PollQuestions {\r\n    count: string;\r\n    pollOption: string\r\n}\r\nexport interface Error {\r\n    error: string;\r\n    message: string;\r\n    type: string;\r\n}\r\ninterface ID {\r\n    id: string;\r\n    param: string;\r\n}\r\nconst checkRoute = (path: string) => {\r\n    const match: match<{ id: string, param: string }> = matchPath(path, {\r\n        path: '/:param/:id',\r\n        exact: true,\r\n        strict: false\r\n    })\r\n    if (match && match.params.id.length > 0) {\r\n        return match.params\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nclass Homepage extends Component<RouteComponentProps, State> {\r\n    public webSocket\r\n    constructor(props) {\r\n        super(props);\r\n        this.webSocket = `wss://${document.location.hostname}/socket/`\r\n    }\r\n    state = {\r\n        ws: null,\r\n        poll: null,\r\n        creator: false,\r\n        pollId: checkRoute(this.props.location.pathname),\r\n        error: null\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.state.ws) {\r\n            this.state.ws.removeEventListener('message', this.readWs)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { pollId, ws } = this.state\r\n        if (!ws && pollId && pollId.id.length > 0) {\r\n            const webStr = this.webSocket + pollId\r\n            this.setState({ ws: new WebSocket(webStr) }, () => this.setMessage())\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        const { pollId, ws, error } = this.state\r\n        const route = checkRoute(this.props.location.pathname)\r\n        if (route) {\r\n            if (!pollId || pollId && pollId.id !== route.id) {\r\n                if (ws) ws.close()\r\n                const webStr = this.webSocket + route.id\r\n                this.setState({ pollId: route, ws: new WebSocket(webStr) }, () => this.setMessage())\r\n            } else if (error) {\r\n                this.props.history.push(\"/error\")\r\n            }\r\n        } else {\r\n            if (pollId) {\r\n                ws.close()\r\n                ws.removeEventListener('message', this.setMessage)\r\n                this.setState({ pollId: null, ws: null, poll: null })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        console.log(this.state)\r\n        return (\r\n            <div className=\"main\">\r\n                <Nav />\r\n                    <SharePoll id={this.state.poll ? this.state.poll._id : null } />\r\n                <Switch>\r\n                    <Route path=\"/view/:id\" render={(props) => <ViewPoll {...props} poll={this.state.poll} />} />\r\n                    <Route path=\"/vote/:id\" render={(props) => <VotePoll {...props} ws={this.state.ws} poll={this.state.poll} error={this.state.error} />} />\r\n                    <Route path=\"/error\" render={(props) => <ErrorScreen {...props} error={this.state.error} clearError={this.clearError} />} />\r\n                    <Route path=\"/\" render={(props) => <CreatePoll {...props} />} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n    setMessage = () => {\r\n        const { ws } = this.state\r\n        ws.addEventListener('message', this.readWs)\r\n    }\r\n    readWs = (msg: any) => {\r\n        if (!msg.data) return\r\n        const result = JSON.parse(msg.data)\r\n        if (result.error) {\r\n            this.handleError(result)\r\n            return\r\n        } else if (this.state.error) {\r\n            this.setState({ error: null, poll: result })\r\n            return\r\n        }\r\n        switch (result.type) {\r\n            case \"upvote\":\r\n                const shallow = this.state.poll\r\n                shallow.pollQuestions[result.upvote].count += 1\r\n                this.setState({ poll: shallow })\r\n                break;\r\n            default:\r\n                this.setState({ poll: result })\r\n        }\r\n    }\r\n    handleError = (err: Error) => {\r\n        switch (err.type) {\r\n            case \"invalid_id\":\r\n                err.message = \"The ID entered seems to be invalid\"\r\n            case \"not_found\":\r\n                err.message = \"Poll could not be found\"\r\n            case \"duplicate_ip\":\r\n                this.setState({ error: err })\r\n                break;\r\n            default:\r\n                this.setState({ error: err, poll: null, ws: null }, () => {\r\n                    this.state.ws.close()\r\n                })\r\n        }\r\n    }\r\n    clearError = () => {\r\n       this.setState({error: null}) \r\n    }\r\n}\r\n\r\nexport default withRouter(Homepage)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nimport Main from './components/Main/main';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Main />\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}